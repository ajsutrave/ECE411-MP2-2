-- VHDL Entity ece411.Cache_Controller.interface
--
-- Created:
--          by - sutrave1.ews (gelib-057-06.ews.illinois.edu)
--          at - 18:28:42 02/17/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Controller IS
   PORT( 
      CLK         : IN     STD_LOGIC;
      PMRESP_H    : IN     STD_LOGIC;
      RESET_L     : IN     STD_LOGIC;
      cache_hit   : IN     std_logic;
      mem_req     : IN     STD_LOGIC;
      PMREAD_L    : OUT    STD_LOGIC;
      PMWRITE_L   : OUT    STD_LOGIC;
      cache_write : OUT    std_logic
   );

-- Declarations

END Cache_Controller ;

--
-- VHDL Architecture ece411.Cache_Controller.fsm
--
-- Created:
--          by - sutrave1.ews (gelib-057-06.ews.illinois.edu)
--          at - 18:28:42 02/17/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Cache_Controller IS

   TYPE STATE_TYPE IS (
      Miss,
      Update,
      Idle
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      CLK,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= Idle;
      ELSIF (CLK'EVENT AND CLK = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      PMRESP_H,
      cache_hit,
      current_state,
      mem_req
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN Miss => 
            IF (PMRESP_H  = '1') THEN 
               next_state <= Update;
            ELSE
               next_state <= Miss;
            END IF;
         WHEN Update => 
            next_state <= Idle;
         WHEN Idle => 
            IF (cache_hit = '0' AND mem_req = '1') THEN 
               next_state <= Miss;
            ELSE
               next_state <= Idle;
            END IF;
         WHEN OTHERS =>
            next_state <= Idle;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      PMREAD_L <= '1';
      PMWRITE_L <= '1';
      cache_write <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN Miss => 
            PMREAD_L  <= '0';
         WHEN Update => 
            cache_write <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
