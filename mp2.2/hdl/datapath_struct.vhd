-- VHDL Entity ece411.datapath.interface
--
-- Created:
--          by - sutrave1.ews (gelib-057-28.ews.illinois.edu)
--          at - 19:17:38 02/15/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY datapath IS
   PORT( 
      ADJMuxSel        : IN     std_logic;
      ALUMuxSel        : IN     std_logic;
      ALUop            : IN     LC3b_aluop;
      DATAIN           : IN     LC3b_word;
      ImmMuxSel        : IN     std_logic;
      IndirectMuxSel   : IN     std_logic;
      JmpMuxSel        : IN     std_logic;
      LDBMuxSel        : IN     std_logic;
      LEAMuxSel        : IN     std_logic;
      LoadIR           : IN     std_logic;
      LoadMAR          : IN     std_logic;
      LoadMDR          : IN     std_logic;
      LoadNZP          : IN     std_logic;
      LoadPC           : IN     std_logic;
      MARMuxSel        : IN     std_logic;
      MDR2PCMuxSel     : IN     std_logic;
      MDRMuxSel        : IN     std_logic;
      PC2RegFileMuxSel : IN     std_logic;
      PCMuxSel         : IN     std_logic;
      R7MuxSel         : IN     std_logic;
      RESET_L          : IN     std_logic;
      RFMuxSel         : IN     std_logic;
      RegWrite         : IN     std_logic;
      SEXT6MuxSel      : IN     std_logic;
      StoreSR          : IN     std_logic;
      TRAPMuxSel       : IN     std_logic;
      clk              : IN     std_logic;
      ADDRESS          : OUT    LC3b_word;
      CheckN           : OUT    std_logic;
      CheckP           : OUT    std_logic;
      CheckZ           : OUT    std_logic;
      DATAOUT          : OUT    LC3b_word;
      Opcode           : OUT    LC3b_opcode;
      imm_bit          : OUT    std_logic;
      jsr_mode_bit     : OUT    std_logic;
      mem_byte_sel     : OUT    std_logic;
      n                : OUT    std_logic;
      p                : OUT    std_logic;
      shft_op          : OUT    LC3b_shftop;
      z                : OUT    std_logic
   );

-- Declarations

END datapath ;

--
-- VHDL Architecture ece411.datapath.struct
--
-- Created:
--          by - sutrave1.ews (gelib-057-28.ews.illinois.edu)
--          at - 19:17:38 02/15/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ11out         : LC3b_word;
   SIGNAL ADJ5out          : LC3b_word;
   SIGNAL ADJ6out          : LC3b_word;
   SIGNAL ADJ8out          : LC3b_word;
   SIGNAL ADJ9out          : LC3b_word;
   SIGNAL AJDMuxout        : LC3b_word;
   SIGNAL ALUMuxout        : LC3b_word;
   SIGNAL ALUout           : LC3b_word;
   SIGNAL BRaddout         : LC3b_word;
   SIGNAL GenCCout         : LC3b_cc;
   SIGNAL ImmMuxout        : LC3b_word;
   SIGNAL IndirectMuxout   : LC3b_word;
   SIGNAL JmpMuxout        : LC3b_word;
   SIGNAL LDBMuxout        : LC3b_word;
   SIGNAL LEAMuxout        : LC3b_word;
   SIGNAL MARMuxout        : LC3b_word;
   SIGNAL MDR2PCMuxout     : LC3b_word;
   SIGNAL MDRByteSelMuxout : LC3b_word;
   SIGNAL MDRMuxout        : LC3b_word;
   SIGNAL MDRhigh          : LC3b_word;
   SIGNAL MDRlow           : LC3b_word;
   SIGNAL MDRout           : LC3b_word;
   SIGNAL PC2RegFileMuxout : LC3b_word;
   SIGNAL PCMuxout         : LC3b_word;
   SIGNAL PCPlus2out       : LC3b_word;
   SIGNAL PCoff11out       : LC3b_word;
   SIGNAL PCout            : LC3b_word;
   SIGNAL R7Muxout         : LC3b_reg;
   SIGNAL RFAout           : LC3b_word;
   SIGNAL RFBout           : LC3b_word;
   SIGNAL RFMuxout         : LC3b_word;
   SIGNAL SEXT6Muxout      : LC3b_word;
   SIGNAL SEXT6out         : LC3b_word;
   SIGNAL SrcA             : LC3b_reg;
   SIGNAL SrcB             : LC3b_reg;
   SIGNAL StoreMuxout      : LC3b_reg;
   SIGNAL TRAPMuxout       : LC3b_word;
   SIGNAL dest             : LC3b_reg;
   SIGNAL imm4             : LC3b_imm4;
   SIGNAL imm5             : LC3b_imm5;
   SIGNAL index6           : LC3b_index6;
   SIGNAL offset11         : LC3b_offset11;
   SIGNAL offset9          : LC3b_offset9;
   SIGNAL trapvect8        : LC3b_trapvect8;

   -- Implicit buffer signal declarations
   SIGNAL ADDRESS_internal      : LC3b_word;
   SIGNAL mem_byte_sel_internal : std_logic;


   -- Component Declarations
   COMPONENT ADJ11
   PORT (
      offset11 : IN     LC3b_offset11 ;
      clk      : IN     std_logic ;
      ADJ11out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ5
   PORT (
      clk     : IN     std_logic ;
      imm5    : IN     LC3b_imm5 ;
      ADJ5out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ6
   PORT (
      clk     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ8
   PORT (
      clk       : IN     std_logic ;
      trapvect8 : IN     LC3b_trapvect8 ;
      ADJ8out   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      clk     : IN     std_logic ;
      ADJ9out : OUT    LC3b_word ;
      offset9 : IN     LC3b_offset9 
   );
   END COMPONENT;
   COMPONENT ALU
   PORT (
      ALUMuxout : IN     LC3b_word ;
      ALUop     : IN     LC3b_aluop ;
      RFAout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      imm4      : IN     LC3b_imm4 ;
      ALUout    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BRadd
   PORT (
      ADJ9out  : IN     LC3b_word ;
      clk      : IN     std_logic ;
      BRaddout : OUT    LC3b_word ;
      PCout    : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT ByteSelector
   PORT (
      ADDRESS      : IN     LC3b_word ;
      clk          : IN     std_logic ;
      mem_byte_sel : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      RFMuxout : IN     LC3b_word ;
      clk      : IN     std_logic ;
      GenCCout : OUT    LC3b_cc 
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR       : IN     std_logic ;
      MDRout       : IN     LC3b_word ;
      clk          : IN     std_logic ;
      Opcode       : OUT    LC3b_opcode ;
      SrcA         : OUT    LC3b_reg ;
      SrcB         : OUT    LC3b_reg ;
      dest         : OUT    LC3b_reg ;
      index6       : OUT    LC3b_index6 ;
      imm_bit      : OUT    std_logic ;
      offset9      : OUT    LC3b_offset9 ;
      imm5         : OUT    LC3b_imm5 ;
      jsr_mode_bit : OUT    std_logic ;
      offset11     : OUT    LC3b_offset11 ;
      trapvect8    : OUT    LC3b_trapvect8 ;
      imm4         : OUT    LC3b_imm4 ;
      shft_op      : OUT    LC3b_shftop 
   );
   END COMPONENT;
   COMPONENT MDRsplitter
   PORT (
      MDRout  : IN     LC3b_word ;
      clk     : IN     std_logic ;
      MDRhigh : OUT    LC3b_word ;
      MDRlow  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZPsplit
   PORT (
      clk    : IN     std_logic ;
      dest   : IN     LC3b_reg ;
      CheckN : OUT    std_logic ;
      CheckP : OUT    std_logic ;
      CheckZ : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT PCoff11
   PORT (
      ADJ11out   : IN     LC3b_word ;
      clk        : IN     std_logic ;
      PCout      : IN     LC3b_word ;
      PCoff11out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      clk        : IN     std_logic ;
      PCPlus2out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT R7Mux
   PORT (
      clk      : IN     std_logic ;
      R7MuxSel : IN     std_logic ;
      dest     : IN     LC3b_reg ;
      R7Muxout : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      clk    : IN     std_logic ;
      input  : IN     LC3b_word ;
      load   : IN     std_logic ;
      reset  : IN     std_logic ;
      output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      RESET_L     : IN     std_logic ;
      RegWrite    : IN     std_logic ;
      SrcB        : IN     LC3b_reg ;
      clk         : IN     std_logic ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word ;
      RFMuxout    : IN     LC3b_word ;
      StoreMuxout : IN     LC3b_reg ;
      R7Muxout    : IN     LC3b_reg 
   );
   END COMPONENT;
   COMPONENT SEXT6
   PORT (
      clk      : IN     std_logic ;
      index6   : IN     LC3b_index6 ;
      SEXT6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT StoreMux
   PORT (
      StoreSR     : IN     std_logic ;
      clk         : IN     std_logic ;
      SrcA        : IN     LC3b_reg ;
      StoreMuxout : OUT    LC3b_reg ;
      dest        : IN     LC3b_reg 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : ADJ5 USE ENTITY ece411.ADJ5;
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ8 USE ENTITY ece411.ADJ8;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : ALU USE ENTITY ece411.ALU;
   FOR ALL : BRadd USE ENTITY ece411.BRadd;
   FOR ALL : ByteSelector USE ENTITY ece411.ByteSelector;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : MDRsplitter USE ENTITY ece411.MDRsplitter;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : NZPsplit USE ENTITY ece411.NZPsplit;
   FOR ALL : PCoff11 USE ENTITY ece411.PCoff11;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : R7Mux USE ENTITY ece411.R7Mux;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : SEXT6 USE ENTITY ece411.SEXT6;
   FOR ALL : StoreMux USE ENTITY ece411.StoreMux;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   DATAOUT <= MDRout;


   -- Instance port mappings.
   aADJ11 : ADJ11
      PORT MAP (
         offset11 => offset11,
         clk      => clk,
         ADJ11out => ADJ11out
      );
   aADJ5 : ADJ5
      PORT MAP (
         clk     => clk,
         imm5    => imm5,
         ADJ5out => ADJ5out
      );
   aADJ6 : ADJ6
      PORT MAP (
         clk     => clk,
         index6  => index6,
         ADJ6out => ADJ6out
      );
   aADJ8 : ADJ8
      PORT MAP (
         clk       => clk,
         trapvect8 => trapvect8,
         ADJ8out   => ADJ8out
      );
   aADJ9 : ADJ9
      PORT MAP (
         clk     => clk,
         ADJ9out => ADJ9out,
         offset9 => offset9
      );
   aALU : ALU
      PORT MAP (
         ALUMuxout => ALUMuxout,
         ALUop     => ALUop,
         RFAout    => RFAout,
         clk       => clk,
         imm4      => imm4,
         ALUout    => ALUout
      );
   aBRadd : BRadd
      PORT MAP (
         ADJ9out  => ADJ9out,
         clk      => clk,
         BRaddout => BRaddout,
         PCout    => PCout
      );
   aByteSelector : ByteSelector
      PORT MAP (
         ADDRESS      => ADDRESS_internal,
         clk          => clk,
         mem_byte_sel => mem_byte_sel_internal
      );
   GenCondCode : GenCC
      PORT MAP (
         RFMuxout => RFMuxout,
         clk      => clk,
         GenCCout => GenCCout
      );
   aIR : IR
      PORT MAP (
         LoadIR       => LoadIR,
         MDRout       => MDRout,
         clk          => clk,
         Opcode       => Opcode,
         SrcA         => SrcA,
         SrcB         => SrcB,
         dest         => dest,
         index6       => index6,
         imm_bit      => imm_bit,
         offset9      => offset9,
         imm5         => imm5,
         jsr_mode_bit => jsr_mode_bit,
         offset11     => offset11,
         trapvect8    => trapvect8,
         imm4         => imm4,
         shft_op      => shft_op
      );
   aMDRsplitter : MDRsplitter
      PORT MAP (
         MDRout  => MDRout,
         clk     => clk,
         MDRhigh => MDRhigh,
         MDRlow  => MDRlow
      );
   aNZP : NZP
      PORT MAP (
         GenCCout => GenCCout,
         LoadNZP  => LoadNZP,
         clk      => clk,
         n        => n,
         p        => p,
         z        => z
      );
   aNZPsplit : NZPsplit
      PORT MAP (
         clk    => clk,
         dest   => dest,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ
      );
   aPCoff11 : PCoff11
      PORT MAP (
         ADJ11out   => ADJ11out,
         clk        => clk,
         PCout      => PCout,
         PCoff11out => PCoff11out
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => PCout,
         clk        => clk,
         PCPlus2out => PCPlus2out
      );
   aR7Mux : R7Mux
      PORT MAP (
         clk      => clk,
         R7MuxSel => R7MuxSel,
         dest     => dest,
         R7Muxout => R7Muxout
      );
   MAR : Reg16
      PORT MAP (
         clk    => clk,
         input  => TRAPMuxout,
         load   => LoadMAR,
         reset  => RESET_L,
         output => ADDRESS_internal
      );
   MDR : Reg16
      PORT MAP (
         clk    => clk,
         input  => MDRMuxout,
         load   => LoadMDR,
         reset  => RESET_L,
         output => MDRout
      );
   PC : Reg16
      PORT MAP (
         clk    => clk,
         input  => MDR2PCMuxout,
         load   => LoadPC,
         reset  => RESET_L,
         output => PCout
      );
   aRegFile : RegFile
      PORT MAP (
         RESET_L     => RESET_L,
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         clk         => clk,
         RFAout      => RFAout,
         RFBout      => RFBout,
         RFMuxout    => RFMuxout,
         StoreMuxout => StoreMuxout,
         R7Muxout    => R7Muxout
      );
   aSEXT6 : SEXT6
      PORT MAP (
         clk      => clk,
         index6   => index6,
         SEXT6out => SEXT6out
      );
   aStoreMux : StoreMux
      PORT MAP (
         StoreSR     => StoreSR,
         clk         => clk,
         SrcA        => SrcA,
         StoreMuxout => StoreMuxout,
         dest        => dest
      );
   ADJMux : WordMux2
      PORT MAP (
         A   => BRaddout,
         B   => PCoff11out,
         Sel => ADJMuxSel,
         F   => AJDMuxout
      );
   ALUMux : WordMux2
      PORT MAP (
         A   => ImmMuxout,
         B   => SEXT6Muxout,
         Sel => ALUMuxSel,
         F   => ALUMuxout
      );
   ImmMux : WordMux2
      PORT MAP (
         A   => RFBout,
         B   => ADJ5out,
         Sel => ImmMuxSel,
         F   => ImmMuxout
      );
   IndirectMux : WordMux2
      PORT MAP (
         A   => MARMuxout,
         B   => MDRout,
         Sel => IndirectMuxSel,
         F   => IndirectMuxout
      );
   JmpMux : WordMux2
      PORT MAP (
         A   => PCMuxout,
         B   => ALUout,
         Sel => JmpMuxSel,
         F   => JmpMuxout
      );
   LDBMux : WordMux2
      PORT MAP (
         A   => MDRout,
         B   => MDRByteSelMuxout,
         Sel => LDBMuxSel,
         F   => LDBMuxout
      );
   LEAMux : WordMux2
      PORT MAP (
         A   => ALUout,
         B   => PC2RegFileMuxout,
         Sel => LEAMuxSel,
         F   => LEAMuxout
      );
   MARMux : WordMux2
      PORT MAP (
         A   => PCout,
         B   => ALUout,
         Sel => MARMuxSel,
         F   => MARMuxout
      );
   MDR2PCMux : WordMux2
      PORT MAP (
         A   => JmpMuxout,
         B   => MDRout,
         Sel => MDR2PCMuxSel,
         F   => MDR2PCMuxout
      );
   MDRByteSelMux : WordMux2
      PORT MAP (
         A   => MDRlow,
         B   => MDRhigh,
         Sel => mem_byte_sel_internal,
         F   => MDRByteSelMuxout
      );
   MDRMux : WordMux2
      PORT MAP (
         A   => DATAIN,
         B   => ALUout,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   PC2RegFileMux : WordMux2
      PORT MAP (
         A   => BRaddout,
         B   => PCout,
         Sel => PC2RegFileMuxSel,
         F   => PC2RegFileMuxout
      );
   PCMux : WordMux2
      PORT MAP (
         A   => PCPlus2out,
         B   => AJDMuxout,
         Sel => PCMuxSel,
         F   => PCMuxout
      );
   RFMux : WordMux2
      PORT MAP (
         A   => LDBMuxout,
         B   => LEAMuxout,
         Sel => RFMuxSel,
         F   => RFMuxout
      );
   SEXT6Mux : WordMux2
      PORT MAP (
         A   => ADJ6out,
         B   => SEXT6out,
         Sel => SEXT6MuxSel,
         F   => SEXT6Muxout
      );
   TRAPMux : WordMux2
      PORT MAP (
         A   => IndirectMuxout,
         B   => ADJ8out,
         Sel => TRAPMuxSel,
         F   => TRAPMuxout
      );

   -- Implicit buffered output assignments
   ADDRESS      <= ADDRESS_internal;
   mem_byte_sel <= mem_byte_sel_internal;

END struct;
