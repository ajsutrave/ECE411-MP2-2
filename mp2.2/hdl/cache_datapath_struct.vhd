-- VHDL Entity ece411.Cache_Datapath.interface
--
-- Created:
--          by - sutrave1.ews (gelib-057-06.ews.illinois.edu)
--          at - 19:36:41 02/17/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Datapath IS
   PORT( 
      ADDRESS     : IN     LC3b_word;
      CLK         : IN     STD_LOGIC;
      DATAOUT     : IN     LC3b_word;
      MREAD_L     : IN     std_logic;
      MWRITEH_L   : IN     std_logic;
      MWRITEL_L   : IN     std_logic;
      PMDATAIN    : IN     LC3B_OWORD;
      RESET_L     : IN     STD_LOGIC;
      cache_write : IN     std_logic;
      DATAIN      : OUT    LC3b_word;
      MRESP_H     : OUT    std_logic;
      PMADDRESS   : OUT    LC3B_WORD;
      PMDATAOUT   : OUT    LC3b_oword;
      cache_hit   : OUT    std_logic;
      mem_req     : OUT    STD_LOGIC
   );

-- Declarations

END Cache_Datapath ;

--
-- VHDL Architecture ece411.Cache_Datapath.struct
--
-- Created:
--          by - sutrave1.ews (gelib-057-06.ews.illinois.edu)
--          at - 19:36:41 02/17/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF Cache_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL CacheLineWrite0 : STD_LOGIC;
   SIGNAL CacheLineWrite1 : STD_LOGIC;
   SIGNAL DATAOUT1        : LC3B_word;
   SIGNAL DataArrayOut    : LC3b_OWORD;
   SIGNAL DataArrayOut0   : LC3B_OWORD;
   SIGNAL DataArrayOut1   : LC3B_OWORD;
   SIGNAL DirtyBit0       : std_logic;
   SIGNAL DirtyBit1       : std_logic;
   SIGNAL F               : std_logic;
   SIGNAL F1              : std_logic;
   SIGNAL F2              : std_logic;
   SIGNAL F3              : std_logic;
   SIGNAL F4              : STD_LOGIC;
   SIGNAL LRU0            : std_logic;
   SIGNAL LRUBit          : std_logic;
   SIGNAL LRUBitIn        : std_logic;
   SIGNAL MWRITEL_H       : std_logic;
   SIGNAL NOTValid0       : std_logic;
   SIGNAL NOTValid1       : std_logic;
   SIGNAL PMOutWord       : LC3b_WORD;
   SIGNAL TagArrayOut     : LC3B_C_TAG;
   SIGNAL TagArrayOut1    : LC3B_C_TAG;
   SIGNAL ValidBit0       : std_logic;
   SIGNAL ValidBit1       : std_logic;
   SIGNAL byte_offset     : std_logic;
   SIGNAL cache_empty     : STD_LOGIC;
   SIGNAL cache_full      : std_logic;
   SIGNAL cache_miss      : std_logic;
   SIGNAL cache_not_empty : STD_LOGIC;
   SIGNAL dword0          : LC3b_WORD;
   SIGNAL dword1          : LC3b_WORD;
   SIGNAL dword10         : LC3b_WORD;
   SIGNAL dword11         : LC3b_WORD;
   SIGNAL dword12         : LC3b_WORD;
   SIGNAL dword13         : LC3b_WORD;
   SIGNAL dword14         : LC3b_WORD;
   SIGNAL dword15         : LC3b_WORD;
   SIGNAL dword16         : LC3b_WORD;
   SIGNAL dword17         : LC3b_WORD;
   SIGNAL dword18         : LC3b_WORD;
   SIGNAL dword19         : LC3b_WORD;
   SIGNAL dword2          : LC3b_WORD;
   SIGNAL dword20         : LC3b_WORD;
   SIGNAL dword21         : LC3b_WORD;
   SIGNAL dword22         : LC3b_WORD;
   SIGNAL dword23         : LC3b_WORD;
   SIGNAL dword3          : LC3b_WORD;
   SIGNAL dword4          : LC3b_WORD;
   SIGNAL dword5          : LC3b_WORD;
   SIGNAL dword6          : LC3b_WORD;
   SIGNAL dword7          : LC3b_WORD;
   SIGNAL dword8          : LC3b_WORD;
   SIGNAL dword9          : LC3b_WORD;
   SIGNAL index           : LC3B_C_INDEX;
   SIGNAL offset          : LC3b_C_OFFSET;
   SIGNAL tag             : LC3b_C_TAG;
   SIGNAL way0_dword      : LC3b_WORD;
   SIGNAL way0_hit        : std_logic;
   SIGNAL way1_dword      : LC3b_WORD;
   SIGNAL way1_hit        : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL cache_hit_internal : std_logic;
   SIGNAL mem_req_internal   : STD_LOGIC;


   -- Component Declarations
   COMPONENT AND2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT AddrTranslator
   PORT (
      ADDRESS   : IN     LC3b_word ;
      PMADDRESS : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT AddressSplitter
   PORT (
      ADDRESS     : IN     LC3b_word ;
      index       : OUT    LC3B_C_INDEX ;
      offset      : OUT    LC3b_C_OFFSET ;
      tag         : OUT    LC3b_C_TAG ;
      byte_offset : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT CacheBlock
   PORT (
      AddressTag       : IN     LC3B_C_TAG ;
      CacheLineWrite   : IN     std_logic ;
      DATAOUT          : IN     LC3B_word ;
      PMDATAIN         : IN     LC3B_OWORD ;
      RESET_L          : IN     std_logic ;
      index            : IN     LC3b_C_INDEX ;
      DataArrayOut     : OUT    LC3B_OWORD ;
      DirtyBitArrayOut : OUT    std_logic ;
      TagArrayOut      : OUT    LC3B_C_TAG ;
      ValidBitArrayOut : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT DATAOUTTranslator
   PORT (
      DATAOUT      : IN     LC3b_word ;
      DataArrayOut : IN     LC3b_OWORD ;
      MWRITEL_H    : IN     std_logic ;
      MWRITEL_L    : IN     std_logic ;
      byte_offset  : IN     std_logic ;
      offset       : IN     LC3b_C_OFFSET ;
      PMDATAOUT    : OUT    LC3b_oword 
   );
   END COMPONENT;
   COMPONENT DataArraySplitter
   PORT (
      DataArrayOut : IN     LC3B_OWORD;
      dword0       : OUT    LC3b_WORD;
      dword1       : OUT    LC3b_WORD;
      dword2       : OUT    LC3b_WORD;
      dword3       : OUT    LC3b_WORD;
      dword4       : OUT    LC3b_WORD;
      dword5       : OUT    LC3b_WORD;
      dword6       : OUT    LC3b_WORD;
      dword7       : OUT    LC3b_WORD
   );
   END COMPONENT;
   COMPONENT LRUBitArray
   PORT (
      LRUBitIn       : IN     std_logic;
      LRUBitWrite    : IN     std_logic;
      RESET_L        : IN     std_logic;
      index          : IN     LC3b_C_INDEX;
      LRUBitArrayOut : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT MUX2_128
   PORT (
      A   : IN     LC3b_OWORD ;
      B   : IN     LC3b_OWORD ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_OWORD 
   );
   END COMPONENT;
   COMPONENT MUX8_16
   PORT (
      A   : IN     LC3b_WORD ;
      B   : IN     LC3b_WORD ;
      C   : IN     LC3b_WORD ;
      D   : IN     LC3b_WORD ;
      E   : IN     LC3b_WORD ;
      G   : IN     LC3b_WORD ;
      H   : IN     LC3b_WORD ;
      I   : IN     LC3b_WORD ;
      sel : IN     LC3b_C_OFFSET ;
      F   : OUT    LC3b_WORD 
   );
   END COMPONENT;
   COMPONENT NAND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OR3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT TagComparator
   PORT (
      TagArrayOut : IN     LC3B_C_TAG ;
      AddressTag  : IN     LC3b_C_TAG ;
      hit         : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY ece411.AND2;
   FOR ALL : AddrTranslator USE ENTITY ece411.AddrTranslator;
   FOR ALL : AddressSplitter USE ENTITY ece411.AddressSplitter;
   FOR ALL : CacheBlock USE ENTITY ece411.CacheBlock;
   FOR ALL : DATAOUTTranslator USE ENTITY ece411.DATAOUTTranslator;
   FOR ALL : DataArraySplitter USE ENTITY ece411.DataArraySplitter;
   FOR ALL : LRUBitArray USE ENTITY ece411.LRUBitArray;
   FOR ALL : MUX2_128 USE ENTITY ece411.MUX2_128;
   FOR ALL : MUX8_16 USE ENTITY ece411.MUX8_16;
   FOR ALL : NAND3 USE ENTITY ece411.NAND3;
   FOR ALL : NOR2 USE ENTITY ece411.NOR2;
   FOR ALL : NOT1 USE ENTITY ece411.NOT1;
   FOR ALL : OR2 USE ENTITY ece411.OR2;
   FOR ALL : OR3 USE ENTITY ece411.OR3;
   FOR ALL : TagComparator USE ENTITY ece411.TagComparator;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_2 : AND2
      PORT MAP (
         A => cache_hit_internal,
         B => mem_req_internal,
         F => MRESP_H
      );
   U_5 : AND2
      PORT MAP (
         A => ValidBit0,
         B => ValidBit1,
         F => cache_full
      );
   U_7 : AND2
      PORT MAP (
         A => cache_full,
         B => LRU0,
         F => F
      );
   U_13 : AND2
      PORT MAP (
         A => cache_full,
         B => LRUBit,
         F => F1
      );
   U_20 : AND2
      PORT MAP (
         A => F4,
         B => cache_write,
         F => CacheLineWrite0
      );
   U_21 : AND2
      PORT MAP (
         A => F3,
         B => cache_write,
         F => CacheLineWrite1
      );
   U_22 : AND2
      PORT MAP (
         A => F2,
         B => cache_not_empty,
         F => F3
      );
   theAddresTranslator : AddrTranslator
      PORT MAP (
         ADDRESS   => ADDRESS,
         PMADDRESS => PMADDRESS
      );
   theAddressSplitter : AddressSplitter
      PORT MAP (
         ADDRESS     => ADDRESS,
         index       => index,
         offset      => offset,
         tag         => tag,
         byte_offset => byte_offset
      );
   cache_set0 : CacheBlock
      PORT MAP (
         AddressTag       => tag,
         CacheLineWrite   => CacheLineWrite0,
         DATAOUT          => DATAOUT,
         PMDATAIN         => PMDATAIN,
         RESET_L          => RESET_L,
         index            => index,
         DataArrayOut     => DataArrayOut0,
         DirtyBitArrayOut => DirtyBit0,
         TagArrayOut      => TagArrayOut,
         ValidBitArrayOut => ValidBit0
      );
   cache_set1 : CacheBlock
      PORT MAP (
         AddressTag       => tag,
         CacheLineWrite   => CacheLineWrite1,
         DATAOUT          => DATAOUT1,
         PMDATAIN         => PMDATAIN,
         RESET_L          => RESET_L,
         index            => index,
         DataArrayOut     => DataArrayOut1,
         DirtyBitArrayOut => DirtyBit1,
         TagArrayOut      => TagArrayOut1,
         ValidBitArrayOut => ValidBit1
      );
   theDATAOUTTranslator : DATAOUTTranslator
      PORT MAP (
         DATAOUT      => DATAOUT,
         DataArrayOut => DataArrayOut,
         MWRITEL_H    => MWRITEL_H,
         MWRITEL_L    => MWRITEL_L,
         byte_offset  => byte_offset,
         offset       => offset,
         PMDATAOUT    => PMDATAOUT
      );
   DataArrSplit0 : DataArraySplitter
      PORT MAP (
         DataArrayOut => DataArrayOut0,
         dword0       => dword0,
         dword1       => dword1,
         dword2       => dword2,
         dword3       => dword3,
         dword4       => dword4,
         dword5       => dword5,
         dword6       => dword6,
         dword7       => dword7
      );
   DataArrSplit1 : DataArraySplitter
      PORT MAP (
         DataArrayOut => DataArrayOut1,
         dword0       => dword14,
         dword1       => dword8,
         dword2       => dword15,
         dword3       => dword13,
         dword4       => dword12,
         dword5       => dword11,
         dword6       => dword10,
         dword7       => dword9
      );
   PhysMemSplitter : DataArraySplitter
      PORT MAP (
         DataArrayOut => PMDATAIN,
         dword0       => dword16,
         dword1       => dword17,
         dword2       => dword18,
         dword3       => dword19,
         dword4       => dword20,
         dword5       => dword21,
         dword6       => dword22,
         dword7       => dword23
      );
   theLRUArray : LRUBitArray
      PORT MAP (
         RESET_L        => RESET_L,
         LRUBitIn       => LRUBitIn,
         LRUBitWrite    => cache_hit_internal,
         index          => index,
         LRUBitArrayOut => LRUBit
      );
   U_24 : MUX2_128
      PORT MAP (
         A   => DataArrayOut0,
         B   => DataArrayOut1,
         Sel => way1_hit,
         F   => DataArrayOut
      );
   PMdwordMux : MUX8_16
      PORT MAP (
         A   => dword16,
         B   => dword17,
         C   => dword18,
         D   => dword19,
         E   => dword20,
         G   => dword21,
         H   => dword22,
         I   => dword23,
         sel => offset,
         F   => PMOutWord
      );
   dwordMUX0 : MUX8_16
      PORT MAP (
         A   => dword0,
         B   => dword1,
         C   => dword2,
         D   => dword3,
         E   => dword4,
         G   => dword5,
         H   => dword6,
         I   => dword7,
         sel => offset,
         F   => way0_dword
      );
   dwordMUX1 : MUX8_16
      PORT MAP (
         A   => dword14,
         B   => dword8,
         C   => dword15,
         D   => dword13,
         E   => dword12,
         G   => dword11,
         H   => dword10,
         I   => dword9,
         sel => offset,
         F   => way1_dword
      );
   U_18 : NAND3
      PORT MAP (
         A => MREAD_L,
         B => MWRITEL_L,
         C => MWRITEH_L,
         F => mem_req_internal
      );
   U_6 : NOR2
      PORT MAP (
         A => ValidBit0,
         B => ValidBit1,
         F => cache_empty
      );
   U_3 : NOT1
      PORT MAP (
         A => cache_hit_internal,
         F => cache_miss
      );
   U_8 : NOT1
      PORT MAP (
         A => LRUBit,
         F => LRU0
      );
   U_10 : NOT1
      PORT MAP (
         A => ValidBit0,
         F => NOTValid0
      );
   U_12 : NOT1
      PORT MAP (
         A => ValidBit1,
         F => NOTValid1
      );
   U_1 : OR2
      PORT MAP (
         A => ValidBit0,
         B => ValidBit1,
         F => cache_not_empty
      );
   U_14 : OR2
      PORT MAP (
         A => F1,
         B => NOTValid1,
         F => F2
      );
   U_17 : OR2
      PORT MAP (
         A => way0_hit,
         B => CacheLineWrite0,
         F => LRUBitIn
      );
   U_19 : OR2
      PORT MAP (
         A => way0_hit,
         B => way1_hit,
         F => cache_hit_internal
      );
   U_9 : OR3
      PORT MAP (
         A => F,
         B => NOTValid0,
         C => cache_empty,
         F => F4
      );
   tagCompare0 : TagComparator
      PORT MAP (
         TagArrayOut => TagArrayOut,
         AddressTag  => tag,
         hit         => way0_hit
      );
   tagCompare1 : TagComparator
      PORT MAP (
         TagArrayOut => TagArrayOut1,
         AddressTag  => tag,
         hit         => way1_hit
      );
   CacheWayMux : WordMux2
      PORT MAP (
         A   => way0_dword,
         B   => way1_dword,
         Sel => way1_hit,
         F   => DATAIN
      );

   -- Implicit buffered output assignments
   cache_hit <= cache_hit_internal;
   mem_req   <= mem_req_internal;

END struct;
