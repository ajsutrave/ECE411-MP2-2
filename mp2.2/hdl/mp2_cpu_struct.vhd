-- VHDL Entity ece411.mp2_CPU.symbol
--
-- Created:
--          by - sutrave1.ews (gelib-057-06.ews.illinois.edu)
--          at - 19:36:41 02/17/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY mp2_CPU IS
   PORT( 
      RESET_L : IN     std_logic;
      START_H : IN     std_logic
   );

-- Declarations

END mp2_CPU ;

--
-- VHDL Architecture ece411.mp2_CPU.struct
--
-- Created:
--          by - sutrave1.ews (gelib-057-06.ews.illinois.edu)
--          at - 19:36:41 02/17/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF mp2_CPU IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADDRESS          : LC3b_word;
   SIGNAL ADJMuxSel        : std_logic;
   SIGNAL ALUMuxSel        : std_logic;
   SIGNAL ALUop            : LC3b_aluop;
   SIGNAL CheckN           : std_logic;
   SIGNAL CheckP           : std_logic;
   SIGNAL CheckZ           : std_logic;
   SIGNAL DATAIN           : LC3b_word;
   SIGNAL DATAOUT          : LC3b_word;
   SIGNAL ImmMuxSel        : std_logic;
   SIGNAL IndirectMuxSel   : std_logic;
   SIGNAL JmpMuxSel        : std_logic;
   SIGNAL LDBMuxSel        : std_logic;
   SIGNAL LEAMuxSel        : std_logic;
   SIGNAL LoadIR           : std_logic;
   SIGNAL LoadMAR          : std_logic;
   SIGNAL LoadMDR          : std_logic;
   SIGNAL LoadNZP          : std_logic;
   SIGNAL LoadPC           : std_logic;
   SIGNAL MARMuxSel        : std_logic;
   SIGNAL MDR2PCMuxSel     : std_logic;
   SIGNAL MDRMuxSel        : std_logic;
   SIGNAL MREAD_L          : std_logic;
   SIGNAL MRESP_H          : std_logic;
   SIGNAL MWRITEH_L        : std_logic;
   SIGNAL MWRITEL_L        : std_logic;
   SIGNAL Opcode           : LC3b_opcode;
   SIGNAL PC2RegFileMuxSel : std_logic;
   SIGNAL PCMuxSel         : std_logic;
   SIGNAL R7MuxSel         : std_logic;
   SIGNAL RFMuxSel         : std_logic;
   SIGNAL RegWrite         : std_logic;
   SIGNAL SEXT6MuxSel      : std_logic;
   SIGNAL StoreSR          : std_logic;
   SIGNAL TRAPMuxSel       : std_logic;
   SIGNAL clk              : std_logic := '0';
   SIGNAL imm_bit          : std_logic;
   SIGNAL jsr_mode_bit     : std_logic;
   SIGNAL mem_byte_sel     : std_logic;
   SIGNAL n                : std_logic;
   SIGNAL p                : std_logic;
   SIGNAL shft_op          : LC3b_shftop;
   SIGNAL z                : std_logic;


   -- Component Declarations
   COMPONENT CLKgen
   PORT (
      clk : INOUT  std_logic  := '0'
   );
   END COMPONENT;
   COMPONENT control
   PORT (
      CheckN           : IN     std_logic ;
      CheckP           : IN     std_logic ;
      CheckZ           : IN     std_logic ;
      MRESP_H          : IN     std_logic ;
      Opcode           : IN     LC3b_opcode ;
      RESET_L          : IN     std_logic ;
      START_H          : IN     std_logic ;
      clk              : IN     std_logic ;
      imm_bit          : IN     std_logic ;
      jsr_mode_bit     : IN     std_logic ;
      mem_byte_sel     : IN     std_logic ;
      n                : IN     std_logic ;
      p                : IN     std_logic ;
      shft_op          : IN     LC3b_shftop ;
      z                : IN     std_logic ;
      ADJMuxSel        : OUT    std_logic ;
      ALUMuxSel        : OUT    std_logic ;
      ALUop            : OUT    LC3b_aluop ;
      ImmMuxSel        : OUT    std_logic ;
      IndirectMuxSel   : OUT    std_logic ;
      JmpMuxSel        : OUT    std_logic ;
      LDBMuxSel        : OUT    std_logic ;
      LEAMuxSel        : OUT    std_logic ;
      LoadIR           : OUT    std_logic ;
      LoadMAR          : OUT    std_logic ;
      LoadMDR          : OUT    std_logic ;
      LoadNZP          : OUT    std_logic ;
      LoadPC           : OUT    std_logic ;
      MARMuxSel        : OUT    std_logic ;
      MDR2PCMuxSel     : OUT    std_logic ;
      MDRMuxSel        : OUT    std_logic ;
      MREAD_L          : OUT    std_logic ;
      MWRITEH_L        : OUT    std_logic ;
      MWRITEL_L        : OUT    std_logic ;
      PC2RegFileMuxSel : OUT    std_logic ;
      PCMuxSel         : OUT    std_logic ;
      R7MuxSel         : OUT    std_logic ;
      RFMuxSel         : OUT    std_logic ;
      RegWrite         : OUT    std_logic ;
      SEXT6MuxSel      : OUT    std_logic ;
      StoreSR          : OUT    std_logic ;
      TRAPMuxSel       : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT datapath
   PORT (
      ADJMuxSel        : IN     std_logic ;
      ALUMuxSel        : IN     std_logic ;
      ALUop            : IN     LC3b_aluop ;
      DATAIN           : IN     LC3b_word ;
      ImmMuxSel        : IN     std_logic ;
      IndirectMuxSel   : IN     std_logic ;
      JmpMuxSel        : IN     std_logic ;
      LDBMuxSel        : IN     std_logic ;
      LEAMuxSel        : IN     std_logic ;
      LoadIR           : IN     std_logic ;
      LoadMAR          : IN     std_logic ;
      LoadMDR          : IN     std_logic ;
      LoadNZP          : IN     std_logic ;
      LoadPC           : IN     std_logic ;
      MARMuxSel        : IN     std_logic ;
      MDR2PCMuxSel     : IN     std_logic ;
      MDRMuxSel        : IN     std_logic ;
      PC2RegFileMuxSel : IN     std_logic ;
      PCMuxSel         : IN     std_logic ;
      R7MuxSel         : IN     std_logic ;
      RESET_L          : IN     std_logic ;
      RFMuxSel         : IN     std_logic ;
      RegWrite         : IN     std_logic ;
      SEXT6MuxSel      : IN     std_logic ;
      StoreSR          : IN     std_logic ;
      TRAPMuxSel       : IN     std_logic ;
      clk              : IN     std_logic ;
      ADDRESS          : OUT    LC3b_word ;
      CheckN           : OUT    std_logic ;
      CheckP           : OUT    std_logic ;
      CheckZ           : OUT    std_logic ;
      DATAOUT          : OUT    LC3b_word ;
      Opcode           : OUT    LC3b_opcode ;
      imm_bit          : OUT    std_logic ;
      jsr_mode_bit     : OUT    std_logic ;
      mem_byte_sel     : OUT    std_logic ;
      n                : OUT    std_logic ;
      p                : OUT    std_logic ;
      shft_op          : OUT    LC3b_shftop ;
      z                : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT memory
   PORT (
      ADDRESS   : IN     LC3b_word ;
      CLK       : IN     STD_LOGIC ;
      DATAOUT   : IN     LC3b_word ;
      MREAD_L   : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      RESET_L   : IN     STD_LOGIC ;
      DATAIN    : OUT    LC3b_word ;
      MRESP_H   : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : CLKgen USE ENTITY ece411.CLKgen;
   FOR ALL : control USE ENTITY ece411.control;
   FOR ALL : datapath USE ENTITY ece411.datapath;
   FOR ALL : memory USE ENTITY ece411.memory;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   I0 : CLKgen
      PORT MAP (
         clk => clk
      );
   ControlUnit : control
      PORT MAP (
         CheckN           => CheckN,
         CheckP           => CheckP,
         CheckZ           => CheckZ,
         MRESP_H          => MRESP_H,
         Opcode           => Opcode,
         RESET_L          => RESET_L,
         START_H          => START_H,
         clk              => clk,
         imm_bit          => imm_bit,
         jsr_mode_bit     => jsr_mode_bit,
         mem_byte_sel     => mem_byte_sel,
         n                => n,
         p                => p,
         shft_op          => shft_op,
         z                => z,
         ADJMuxSel        => ADJMuxSel,
         ALUMuxSel        => ALUMuxSel,
         ALUop            => ALUop,
         ImmMuxSel        => ImmMuxSel,
         IndirectMuxSel   => IndirectMuxSel,
         JmpMuxSel        => JmpMuxSel,
         LDBMuxSel        => LDBMuxSel,
         LEAMuxSel        => LEAMuxSel,
         LoadIR           => LoadIR,
         LoadMAR          => LoadMAR,
         LoadMDR          => LoadMDR,
         LoadNZP          => LoadNZP,
         LoadPC           => LoadPC,
         MARMuxSel        => MARMuxSel,
         MDR2PCMuxSel     => MDR2PCMuxSel,
         MDRMuxSel        => MDRMuxSel,
         MREAD_L          => MREAD_L,
         MWRITEH_L        => MWRITEH_L,
         MWRITEL_L        => MWRITEL_L,
         PC2RegFileMuxSel => PC2RegFileMuxSel,
         PCMuxSel         => PCMuxSel,
         R7MuxSel         => R7MuxSel,
         RFMuxSel         => RFMuxSel,
         RegWrite         => RegWrite,
         SEXT6MuxSel      => SEXT6MuxSel,
         StoreSR          => StoreSR,
         TRAPMuxSel       => TRAPMuxSel
      );
   theDatapath : datapath
      PORT MAP (
         ADJMuxSel        => ADJMuxSel,
         ALUMuxSel        => ALUMuxSel,
         ALUop            => ALUop,
         DATAIN           => DATAIN,
         ImmMuxSel        => ImmMuxSel,
         IndirectMuxSel   => IndirectMuxSel,
         JmpMuxSel        => JmpMuxSel,
         LDBMuxSel        => LDBMuxSel,
         LEAMuxSel        => LEAMuxSel,
         LoadIR           => LoadIR,
         LoadMAR          => LoadMAR,
         LoadMDR          => LoadMDR,
         LoadNZP          => LoadNZP,
         LoadPC           => LoadPC,
         MARMuxSel        => MARMuxSel,
         MDR2PCMuxSel     => MDR2PCMuxSel,
         MDRMuxSel        => MDRMuxSel,
         PC2RegFileMuxSel => PC2RegFileMuxSel,
         PCMuxSel         => PCMuxSel,
         R7MuxSel         => R7MuxSel,
         RESET_L          => RESET_L,
         RFMuxSel         => RFMuxSel,
         RegWrite         => RegWrite,
         SEXT6MuxSel      => SEXT6MuxSel,
         StoreSR          => StoreSR,
         TRAPMuxSel       => TRAPMuxSel,
         clk              => clk,
         ADDRESS          => ADDRESS,
         CheckN           => CheckN,
         CheckP           => CheckP,
         CheckZ           => CheckZ,
         DATAOUT          => DATAOUT,
         Opcode           => Opcode,
         imm_bit          => imm_bit,
         jsr_mode_bit     => jsr_mode_bit,
         mem_byte_sel     => mem_byte_sel,
         n                => n,
         p                => p,
         shft_op          => shft_op,
         z                => z
      );
   DRAM : memory
      PORT MAP (
         ADDRESS   => ADDRESS,
         DATAOUT   => DATAOUT,
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         RESET_L   => RESET_L,
         clk       => clk,
         DATAIN    => DATAIN,
         MRESP_H   => MRESP_H
      );

END struct;
